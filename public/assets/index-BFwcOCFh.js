(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))e(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&e(r)}).observe(document,{childList:!0,subtree:!0});function s(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function e(o){if(o.ep)return;o.ep=!0;const n=s(o);fetch(o.href,n)}})();class a{constructor(){this.currentView="init",this.logs=[],this.templates=[],this.init()}async init(){this.setupEventListeners(),await this.checkEnvironmentStatus(),await this.loadTemplates(),this.setupFormHandlers()}setupEventListeners(){document.querySelectorAll(".nav-btn").forEach(t=>{t.addEventListener("click",s=>{const e=s.target.dataset.view;this.switchView(e)})}),document.getElementById("clear-logs").addEventListener("click",()=>{this.clearLogs()}),document.getElementById("agent-mode").addEventListener("change",t=>{const s=document.getElementById("orchestration-group");t.target.value==="orchestrated"||t.target.value==="hybrid"?s.style.display="block":s.style.display="none"})}setupFormHandlers(){const t=document.getElementById("init-form");t.addEventListener("submit",async e=>{e.preventDefault(),await this.handleInitProject(new FormData(t))});const s=document.getElementById("develop-form");s.addEventListener("submit",async e=>{e.preventDefault(),await this.handleDevelopment(new FormData(s))})}switchView(t){document.querySelectorAll(".nav-btn").forEach(s=>{s.classList.remove("active")}),document.querySelector(`[data-view="${t}"]`).classList.add("active"),document.querySelectorAll(".view").forEach(s=>{s.classList.remove("active")}),document.getElementById(`${t}-view`).classList.add("active"),this.currentView=t,t==="status"?this.loadProjectStatus():t==="logs"?this.refreshLogs():t==="develop"&&this.loadDevelopmentView()}async checkEnvironmentStatus(){try{const s=await(await fetch("/.netlify/functions/web-env-status")).json();this.updateStatus("github",s.github),this.updateStatus("netlify",s.netlify),this.updateStatus("mongodb",s.mongodb)}catch(t){console.error("Failed to check environment status:",t),this.updateStatus("github",{configured:!1,error:"Unable to check"}),this.updateStatus("netlify",{configured:!1,error:"Unable to check"}),this.updateStatus("mongodb",{configured:!1,error:"Unable to check"})}}updateStatus(t,s){const e=document.getElementById(`${t}-status`);e.className="status-value",s.configured?(e.textContent="‚úÖ Configured",e.classList.add("success")):s.optional?(e.textContent="‚ö†Ô∏è Optional - Not configured",e.classList.add("warning")):(e.textContent=`‚ùå ${s.error||"Not configured"}`,e.classList.add("error"))}async loadTemplates(){try{const t=await fetch("/.netlify/functions/web-templates");this.templates=await t.json();const s=document.getElementById("template-id");s.innerHTML="",this.templates.forEach(e=>{const o=document.createElement("option");o.value=e.id,o.textContent=`${e.name} - ${e.description}`,s.appendChild(o)})}catch(t){console.error("Failed to load templates:",t);const s=document.getElementById("template-id");s.innerHTML='<option value="">Failed to load templates</option>'}}async handleInitProject(t){const s={};for(let[e,o]of t.entries())e==="autoSetup"?s[e]=!0:s[e]=o;t.has("autoSetup")||(s.autoSetup=!1),this.showLoading("Initializing Project","Setting up your AI development environment..."),this.switchView("logs");try{const o=await(await fetch("/.netlify/functions/web-init",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json();if(this.hideLoading(),o.logs&&Array.isArray(o.logs)&&o.logs.forEach(n=>{this.addLog(n)}),o.success){this.addLog("üéâ Project setup complete!"),this.addLog(`üìÅ Repository: ${o.repoUrl}`),o.netlifyUrl&&this.addLog(`üåê Netlify URL: ${o.netlifyUrl}`),o.mongodbDatabase&&this.addLog(`üçÉ MongoDB Database: ${o.mongodbDatabase}`),this.showSuccess("Project initialized successfully!");const n=document.getElementById("init-btn");n.textContent="‚úÖ Project Initialized",n.disabled=!0,n.style.backgroundColor="#10b981"}else this.addLog(`‚ùå Initialization failed: ${o.error}`),this.showError(`Initialization failed: ${o.error}`)}catch(e){this.hideLoading(),this.addLog(`‚ùå Network error: ${e.message}`),this.showError(`Network error: ${e.message}`)}}async loadProjectStatus(){const t=document.getElementById("status-content");t.innerHTML="<p>Loading project status...</p>";try{const e=await(await fetch("/.netlify/functions/web-status")).json();e.hasProject?t.innerHTML=`
                    <div class="status-section">
                        <h3>Current Project</h3>
                        <p><strong>Name:</strong> ${e.name}</p>
                        <p><strong>Template:</strong> ${e.template}</p>
                        <p><strong>AI Provider:</strong> ${e.aiProvider}</p>
                        <p><strong>Agent Mode:</strong> ${e.agentMode}</p>
                        ${e.orchestrationStrategy?`<p><strong>Strategy:</strong> ${e.orchestrationStrategy}</p>`:""}
                        <p><strong>Repository:</strong> <a href="${e.repoUrl}" target="_blank">${e.repoUrl}</a></p>
                        ${e.netlifyProject?`<p><strong>Netlify:</strong> <a href="https://app.netlify.com/sites/${e.netlifyProject}/overview" target="_blank">View Dashboard</a></p>`:""}
                        <p><strong>Created:</strong> ${new Date(e.createdAt).toLocaleString()}</p>
                        ${e.updatedAt?`<p><strong>Last Updated:</strong> ${new Date(e.updatedAt).toLocaleString()}</p>`:""}
                    </div>
                `:t.innerHTML="<p>No project initialized yet. Go to the Initialize tab to get started.</p>"}catch(s){t.innerHTML=`<p>Error loading project status: ${s.message}</p>`}}showLoading(t,s){document.getElementById("loading-title").textContent=t,document.getElementById("loading-message").textContent=s,document.getElementById("loading-overlay").style.display="flex"}hideLoading(){document.getElementById("loading-overlay").style.display="none"}addLog(t){const e=`[${new Date().toLocaleTimeString()}] ${t}`;this.logs.push(e);const o=document.getElementById("log-output");o.textContent=this.logs.join(`
`),o.scrollTop=o.scrollHeight}clearLogs(){this.logs=[],document.getElementById("log-output").textContent=""}refreshLogs(){const t=document.getElementById("log-output");t.textContent=this.logs.join(`
`),t.scrollTop=t.scrollHeight}showSuccess(t){this.addLog(`‚úÖ ${t}`)}showError(t){this.addLog(`‚ùå ${t}`)}async loadDevelopmentView(){try{const s=await(await fetch("/.netlify/functions/web-status")).json(),e=document.getElementById("no-project-message"),o=document.getElementById("develop-form");if(s.hasProject){e.style.display="none",o.style.display="block";const n=document.getElementById("feature-name");n.value||(n.value=`feature/ai-${Date.now()}`)}else e.style.display="block",o.style.display="none"}catch(t){console.error("Failed to load development view:",t);const s=document.getElementById("no-project-message");s.style.display="block",s.innerHTML="<p>Error checking project status. Please try again.</p>"}}async handleDevelopment(t){const s={};for(let[e,o]of t.entries())s[e]=o;this.showLoading("Starting Development","Creating feature branch and initializing AI agents..."),this.switchView("logs");try{const o=await(await fetch("/.netlify/functions/web-develop",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json();this.hideLoading(),o.logs&&Array.isArray(o.logs)&&o.logs.forEach(n=>{this.addLog(n)}),o.success?(this.addLog("üéâ Development session completed!"),this.addLog(`üåø Feature branch: ${o.featureBranch}`),o.pullRequestUrl&&this.addLog(`üîó Pull Request: ${o.pullRequestUrl}`),this.showSuccess("Development session completed successfully!")):(this.addLog(`‚ùå Development failed: ${o.error}`),this.showError(`Development failed: ${o.error}`))}catch(e){this.hideLoading(),this.addLog(`‚ùå Network error: ${e.message}`),this.showError(`Network error: ${e.message}`)}}}document.addEventListener("DOMContentLoaded",()=>{new a});
